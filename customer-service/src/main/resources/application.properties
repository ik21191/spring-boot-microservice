spring.application.name=customer-service
server.port=3001

#Logger
logging.level.root=INFO

#The property eureka.client.serviceUrl.defaultZone property contains the eureka server URL where all the 
#remaining micro services are registered
#The customer service is registered with the Eureka Server through the eureka.client.registerWithEureka property.
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

#Below property is used to register a service with Eureka server and by default it is true, if you make it false then 
#this service will not be able to register itself with Eureka server
#eureka.client.registerWithEureka = true
#eureka.client.fetchRegistry = true

#For circuit breaker
#feign.hystrix.enabled=true

#logging.level.feign=DEBUG

#Resillience4j
#Rate limiting
resilience4j.ratelimiter.instances.getMessageRateLimit.limit-for-period=2
resilience4j.ratelimiter.instances.getMessageRateLimit.limit-refresh-period=5s
resilience4j.ratelimiter.instances.getMessageRateLimit.timeout-duration=0
#The above properties represent that only 2 requests are allowed in 5 seconds duration. 
#Also, there is no timeout duration which means after completion of 5 seconds, the user can send request again.

#Retry
resilience4j.retry.instances.getMessageForRetry.max-attempts=5
resilience4j.retry.instances.getMessageForRetry.wait-duration=2s
#resilience4j.retry.instances.getMessageForRetry.retry-exceptions=org.springframework.web.client.ResourceAccessException

#By default the retry mechanism makes 3 attempts if the service fails for the first time. But here we have configured 
#for 5 attempts, each after 2 seconds interval. Additionally, if business requires it to retry only if a specific 
#exception occurs, that can also be configured as above. If we want Resilience4j to retry when any type of exception 
#occurs, we don't need to mention the property retry-exceptions.

#Circuit Breaker
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.failure-rate-threshold=80
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.permitted-number-of-calls-in-half-open-state=4
resilience4j.circuitbreaker.instances.getMessageForCircuitBreaker.wait-duration-in-open-state=1s

#Time limiter
resilience4j.timelimiter.instances.getMessageTL.timeout-duration=1ms
resilience4j.timelimiter.instances.getMessageTL.cancel-running-future=false
